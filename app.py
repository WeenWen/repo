# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1igF_aUNaDm3HeMUYKehxmme2jRyz1Dt_
"""

import streamlit as st
import pandas as pd
import requests
from datetime import datetime, timedelta
import mplfinance as mpf

# 頁面設定
st.set_page_config(page_title="選股神器", layout="centered")
st.title("FinLab 風格選股神器 v1.0")
st.markdown("條件：法人連買、均線多頭、EPS成長、主力集中")

# 輸入 FinMind Token
token = st.text_input("請輸入你的 FinMind API Token", type="password")

if token and st.button("開始選股"):
    with st.spinner("資料抓取與分析中..."):

        def get_data(dataset, stock_id="", start="", end=""):
            url = "https://api.finmindtrade.com/api/v4/data"
            params = {
                "dataset": dataset,
                "data_id": stock_id,
                "start_date": start,
                "end_date": end,
                "token": token,
            }
            res = requests.get(url, params=params).json()
            return pd.DataFrame(res["data"]) if res["status"] == 200 else pd.DataFrame()

        def moving_avg(df, col, win):
            return df[col].rolling(window=win).mean()

        today = datetime.today().date()
        start_date = today - timedelta(days=60)
        stock_list = get_data("TaiwanStockInfo")
        stock_ids = stock_list[stock_list.type == "twse"]["stock_id"].unique()

        result = []
        price_cache = {}

        for stock in stock_ids:
            try:
                # 法人資料
                chip = get_data("TaiwanStockInstitutionalInvestors", stock, str(start_date), str(today))
                if chip.empty:
                    continue
                chip["net_buy"] = chip[["foreign_investors_buy", "investment_trust_buy", "dealer_buy"]].sum(axis=1) - \
                                   chip[["foreign_investors_sell", "investment_trust_sell", "dealer_sell"]].sum(axis=1)
                chip_pass = (chip.tail(5)["net_buy"] > 0).sum() >= 3

                # 價格與技術面
                price = get_data("TaiwanStockPrice", stock, str(start_date), str(today))
                if price.empty or len(price) < 20:
                    continue
                price["ma5"] = moving_avg(price, "close", 5)
                price["ma20"] = moving_avg(price, "close", 20)
                price["vol_avg"] = price["Trading_Volume"].rolling(5).mean()
                p = price.iloc[-1]
                tech_pass = p["close"] > p["ma20"] and p["ma5"] > p["ma20"] and p["vol_avg"] > 1000000
                price_cache[stock] = price

                # EPS 財報
                eps = get_data("TaiwanStockFinancialStatements", stock)
                eps = eps[(eps["type"] == "Q") & (eps["statement_type"] == "C")]
                eps = eps.sort_values("date").drop_duplicates("date", keep="last")
                eps_pass = False
                if len(eps) >= 5:
                    eps_pass = eps.iloc[-1]["EPS"] > eps.iloc[-5]["EPS"]

                # 券商主力集中度
                dealer = get_data("TaiwanStockDealerTrading", stock, str(start_date), str(today))
                dealer_today = dealer[dealer.date == str(today)]
                dealer_buy = dealer_today.groupby("dealer_id")["buy_share"].sum().sort_values(ascending=False)
                dealer_concentration = dealer_buy.head(5).sum() / dealer_buy.sum() if dealer_buy.sum() else 0
                dealer_pass = dealer_concentration > 0.3

                # 分數 & 解釋
                score = sum([chip_pass, tech_pass, eps_pass, dealer_pass])
                reason = []
                if chip_pass: reason.append("法人連3日以上買超")
                if tech_pass: reason.append("技術面均線多頭排列")
                if eps_pass: reason.append("EPS 年增率為正")
                if dealer_pass: reason.append("主力集中度高 (>30%)")

                result.append({
                    "股票代號": stock,
                    "收盤價": p["close"],
                    "分數": score,
                    "法人": chip_pass,
                    "技術面": tech_pass,
                    "EPS": eps_pass,
                    "主力集中": dealer_pass,
                    "說明": "、".join(reason),
                    "Yahoo": f"[連結](https://tw.stock.yahoo.com/quote/{stock}.TW)"
                })

            except Exception as e:
                continue

        df = pd.DataFrame(result).sort_values("分數", ascending=False).set_index("股票代號")
        st.subheader(f"{today} 選股結果")
        st.dataframe(df)

        stock_pick = st.selectbox("點選查看技術線圖", df.index if not df.empty else [])
        if stock_pick:
            st.markdown(df.loc[stock_pick]["說明"])
            chart = price_cache[stock_pick].copy()
            chart = chart.rename(columns={"date": "Date", "open": "Open", "high": "High", "low": "Low", "close": "Close", "Trading_Volume": "Volume"})
            chart = chart.set_index(pd.to_datetime(chart["Date"]))
            fig, _ = mpf.plot(chart, type='candle', mav=(5,20), volume=True, style='yahoo', returnfig=True)
            st.pyplot(fig)